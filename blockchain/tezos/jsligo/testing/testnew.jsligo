// This is testnew.jsligo
type storage = int;

type parameter =
  ["Increment", int]
| ["Decrement", int]
| ["Reset"];

type @return = [list<operation>, storage];

// Two entrypoints
const add = (store: storage, delta: int): storage => store + delta;
const sub = (store: storage, delta: int): storage => store - delta;

/* Main access point that dispatches to the entrypoints according to
   the smart contract parameter. */
const main = (action: parameter, store: storage) : @return => {
  return [
    list([]) as list<operation>,    // No operations
    match(action, {
      Increment:(n: int) => add (store, n),
      Decrement:(n: int) => sub (store, n),
      Reset: ()          => 0})
  ]
};

// This continues testnew.jsligo

const _test = () : bool => {
  let initial_storage = 42 as int;
  let [taddr, _, _] = Test.originate(main, initial_storage, 0 as tez);
  return (Test.get_storage(taddr) == initial_storage);
};

const test = _test();
